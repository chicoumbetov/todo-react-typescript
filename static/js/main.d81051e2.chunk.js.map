{"version":3,"sources":["AddTodoForm.tsx","TodoListItem.tsx","TodoList.tsx","App.tsx","index.tsx"],"names":["AddTodoForm","addTodo","React","useState","newTodo","setNewTodo","type","value","onChange","e","target","onClick","preventDefault","TodoListItem","todo","toggleTodo","className","complete","undefined","checked","text","TodoList","todos","map","initialTodos","App","setTodos","selectedTodo","newTodos","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAMaA,EAAc,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,QAA+B,EAE1BC,IAAMC,SAAS,IAFW,mBAEjDC,EAFiD,KAExCC,EAFwC,KAYxD,OACI,iCACI,uBAAOC,KAAK,OAAOC,MAAOH,EAASI,SAVtB,SAACC,GAClBJ,EAAWI,EAAEC,OAAOH,UAUhB,wBAAQD,KAAK,SAASK,QAPT,SAACF,GAClBA,EAAEG,iBACFX,EAAQG,IAKJ,0BCbCS,G,MAAe,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,WAEhC,OAAO,6BACK,wBAAOC,UAAWF,EAAKG,SAAW,gBAAaC,EAA/C,UACI,uBAAOZ,KAAK,WACLa,QAASL,EAAKG,SACdT,SAAU,kBAAMO,EAAWD,MAEjCA,EAAKM,YCRbC,EAAW,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOP,EAAgC,EAAhCA,WAC9B,OACI,6BACKO,EAAMC,KAAI,SAAAT,GACP,OACA,cAAC,EAAD,CAEIA,KAAMA,EACNC,WAAYA,GAFPD,EAAKM,YCVxBI,EAA4B,CAChC,CAAEJ,KAAM,eAAgBH,UAAU,GAClC,CAAEG,KAAM,YAAaH,UAAU,IAgClBQ,EA7BH,WAAO,IAAD,EACUvB,WAAesB,GADzB,mBACTF,EADS,KACFI,EADE,KAoBhB,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CAAUJ,MAAOA,EAAOP,WAnBG,SAAAY,GAC7B,IAAMC,EAAWN,EAAMC,KAAI,SAACT,GAC1B,OAAIA,IAASa,EACJ,2BACFb,GADL,IAEEG,UAAWH,EAAKG,WAGbH,KAETY,EAASE,MAUP,cAAC,EAAD,CAAa3B,QAPQ,SAAAG,GACvBsB,EAAS,GAAD,mBAAKJ,GAAL,CAAY,CAACF,KAAMhB,EAASa,UAAU,aCtBlDY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d81051e2.chunk.js","sourcesContent":["import React, {ChangeEvent, FormEvent } from \"react\";\r\n\r\ninterface AddTodoFormProps {\r\n    addTodo: AddTodo;\r\n}\r\n\r\nexport const AddTodoForm = ({addTodo}: AddTodoFormProps) => {\r\n\r\n    const [newTodo, setNewTodo] = React.useState(\"\");\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTodo(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLButtonElement>) => {\r\n        e.preventDefault();\r\n        addTodo(newTodo);\r\n    }\r\n    return (\r\n        <form>\r\n            <input type=\"text\" value={newTodo} onChange={handleChange}/>\r\n            <button type=\"submit\" onClick={handleSubmit}>Add Todo</button>\r\n        </form>\r\n    )\r\n}","//import React, {FC} from 'react';\r\nimport './TodoListItem.css';\r\n\r\ninterface TodoListItemProps {\r\n    todo: Todo;\r\n    toggleTodo: ToggleTodo;\r\n}\r\n\r\nexport const TodoListItem = ({todo, toggleTodo}: TodoListItemProps) => {\r\n    \r\n    return <li>\r\n                <label className={todo.complete ? \"complete\" : undefined}>\r\n                    <input type=\"checkbox\" \r\n                           checked={todo.complete}\r\n                           onChange={() => toggleTodo(todo)}\r\n                            />\r\n                    {todo.text}\r\n                </label>\r\n            </li>\r\n}","import * as React from \"react\";\r\nimport { TodoListItem } from './TodoListItem';\r\n\r\ninterface TodoListProps {\r\n    todos: Array<Todo>;\r\n    toggleTodo: ToggleTodo;\r\n}\r\n\r\nexport const TodoList = ({ todos, toggleTodo }: TodoListProps) => {\r\n    return (\r\n        <ul>\r\n            {todos.map(todo => {\r\n                return (\r\n                <TodoListItem \r\n                    key={todo.text} \r\n                    todo={todo} \r\n                    toggleTodo={toggleTodo} \r\n                />)\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n","import  * as React from 'react';\nimport { AddTodoForm } from './AddTodoForm';\nimport { TodoList } from './TodoList';\n\nconst initialTodos: Array<Todo> = [\n  { text: \"Walk the dog\", complete: false },\n  { text: \"Write app\", complete: false }\n];\n\nconst App = () => {\n  const [todos, setTodos] = React.useState(initialTodos);\n\n  const toggleTodo: ToggleTodo = selectedTodo => {\n    const newTodos = todos.map((todo: Todo) => {\n      if (todo === selectedTodo) {\n        return {\n          ...todo,\n          complete: !todo.complete\n        }\n      }\n      return todo;\n    });\n    setTodos(newTodos);\n  }\n\n  const addTodo: AddTodo = newTodo => {\n    setTodos([...todos, {text: newTodo, complete: false}])\n  }\n\n  return (\n    <React.Fragment>\n      <TodoList todos={todos} toggleTodo={toggleTodo}/>\n      <AddTodoForm addTodo={addTodo}/>\n    </React.Fragment>\n    \n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n); "],"sourceRoot":""}